@model eCommerce.Web.ViewModels.CheckoutViewModel

@if (Model != null && Model.User != null)
{
    <form id="shippingDetailsForm">

        <div class="form-row mb-3">
            <div class="col">
                <label>@("PP.Checkout.Same With Billing Address".LocalizedString())</label>
                <input class="check-box" data-val="true" style="height:20px;width:20px" id="IsBilling" name="IsBilling" type="checkbox" value="true" class="form-control" /><input name="IsBilling" type="hidden" value="false" class="form-control" />
            </div>

        </div>
        <div class="form-row mb-3">
            <div class="col">
                <label>@("PP.Checkout.Country".LocalizedString())</label>
                <input name="Country" id="Country" type="text" value="@Model.User.Country" class="form-control">
            </div>
            <div class="col">
                <label>@("PP.Checkout.City".LocalizedString())</label>
                <input name="City" id="City" type="text" value="@Model.User.City" class="form-control">
            </div>
        </div>
        <div class="form-row mb-3">
            <div class="col">
                <label>@("PP.Checkout.Address".LocalizedString())</label>
                <textarea name="Address" id="Address" class="form-control" style="border: 2px solid #ebebeb;">@Model.User.Address</textarea>
            </div>
            <div class="col">
                <label>@("PP.Checkout.ZipCode".LocalizedString())</label>
                <input name="ZipCode" id="ZipCode" type="text" value="@Model.User.ZipCode" class="form-control">
            </div>
        </div>
    </form>
}

<script>


    $(document).ready(function () {
        $('#IsBilling').change(function () {
            SameAddress();
        });
    });

    function SameAddress() {
        if ($('#IsBilling').prop('checked')) {
            const billingDetails = ($("#billingDetailsForm").serialize().split("&"));
            const country = billingDetails[0];
            const city = billingDetails[1];
            const address = billingDetails[2];
            const zipCode = billingDetails[3];
            $("#Country").val(country.split("=")[1].replace(/%20/g, ' '));
            $("#City").val(city.split("=")[1].replace(/%20/g, ' '));
            $("#Address").val(address.split("=")[1].replace(/%20/g, ' ').replace(/%2C/g,','));
            $("#ZipCode").val(zipCode.split("=")[1].replace(/%20/g, ' '));

        } else {
            console.log("un checked")
        }
    }


    $("#shippingDetailsForm").validate({
        ignore: [],
        errorClass: "alert alert-danger mb-0 rounded-0",
        errorElement: "div",
        rules: {
            Country: {
                required: true,
            },
            City: {
                required: true,
            },
            Address: {
                required: true,
            },
            ZipCode: {
                required: true,
            },
        },
        messages: {
            Country: {
                required: "@("PP.Checkout.Shipping.Validations.CountryRequired".LocalizedString())",
            },
            City: {
                required: "@("PP.Checkout.Shipping.Validations.CityRequired".LocalizedString())",
            },
            Address: {
                required: "@("PP.Checkout.Shipping.Validations.AddressRequired".LocalizedString())",
            },
            ZipCode: {
                required: "@("PP.Checkout.Shipping.Validations.ZipCodeRequired".LocalizedString())",
            },
        },
        highlight: function (element, errorClass) {
            $(element).removeClass(errorClass);
        }
    });
</script>
